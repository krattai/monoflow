#! /usr/bin/python 
# Copyright (c) 2013 Galvanized Logic Inc.
# Use is governed by a FreeBSD license found in the LICENSE file.

"""
The build and distribution script for the virtual universe (vu) project.

Note that build commands are specified in such a way that they can be easily 
copied and tested in a shell.

This script is expected to be called by:
   1) a continuous integration script from a dedicated build server, or,
   2) a local developer testing the build.
"""

import os           # for file system manipulation.
import shutil       # to copy files.
import shlex        # run and control shell commands
import subprocess   # run and control shell commands
import sys          # for command line arguments

def clean():
    # Remove all generated files.
    generatedOutput = ['pkg', 'bin', 'target']
    print 'Removing generated output:'
    for gdir in generatedOutput:
        if os.path.exists(gdir):
            print '    ' + gdir
            shutil.rmtree(gdir)

def buildSrc():
    # Builds all packages.
    buildRender()
    buildAudio()
    buildDevice()
    buildMath()
    buildGrid()
    buildData()
    buildPhysics()
    buildRealm()

def buildRender():
    # Build the (OpenGL) rendering component.
    subprocess.call(shlex.split('go fmt vu/render/gl/gen'))
    subprocess.call(shlex.split('go test vu/render/gl/gen'))
    subprocess.call(shlex.split('go install vu/render/gl/gen'))
    subprocess.call(shlex.split('bin/gen -p src/vu/render/gl -s src/vu/render/gl/gen/glcorearb.h-v4.3'))
    subprocess.call(shlex.split('go fmt vu/render/gl'))
    subprocess.call(shlex.split('go install vu/render/gl'))
    subprocess.call(shlex.split('go test vu/render/gl'))
    subprocess.call(shlex.split('go fmt vu/render'))
    subprocess.call(shlex.split('go install vu/render'))

def buildAudio():
    # Build the OpenAL audio library bindings.
    subprocess.call(shlex.split('go fmt vu/audio/al'))
    subprocess.call(shlex.split('go install vu/audio/al'))
    subprocess.call(shlex.split('go test vu/audio/al'))
    subprocess.call(shlex.split('go fmt vu/audio'))
    subprocess.call(shlex.split('go install vu/audio'))
    subprocess.call(shlex.split('go test vu/audio'))

def buildDevice():
	# Build the native application package.
    subprocess.call(shlex.split('go install vu/device'))
    subprocess.call(shlex.split('go fmt vu/device'))

def buildPhysics():
    # Build the physics (vu/move) package. 
    subprocess.call(shlex.split('go fmt vu/move'))
    subprocess.call(shlex.split('go test vu/move'))
    subprocess.call(shlex.split('go install vu/move'))

def buildData():
    # Build the data import (vu/data) package. 
    subprocess.call(shlex.split('go fmt vu/data'))
    subprocess.call(shlex.split('go test vu/data'))
    subprocess.call(shlex.split('go install vu/data'))

def buildGrid():
    # Build the grid generation package. 
    subprocess.call(shlex.split('go fmt vu/grid'))
    subprocess.call(shlex.split('go test vu/grid'))
    subprocess.call(shlex.split('go install vu/grid'))

def buildMath():
    # Build the matrix-vector package.
    subprocess.call(shlex.split('go fmt vu/math/lin'))
    subprocess.call(shlex.split('go test vu/math/lin'))
    subprocess.call(shlex.split('go install vu/math/lin'))

def buildRealm():
    # Build the 3D virtual universe engine package and examples.
    subprocess.call(shlex.split('go fmt vu'))
    subprocess.call(shlex.split('go install vu'))
    subprocess.call(shlex.split('go fmt vu/eg'))
    subprocess.call(shlex.split('go install vu/eg'))

def usage():
    print 'Usage: build [clean] [src]'

if __name__ == "__main__":
    options = {'clean' : clean, 
               'src'   : buildSrc}
    somethingBuilt = False
    for arg in sys.argv:
        if arg in options:
            print 'Performing build ' + arg
            options[arg]()
            somethingBuilt = True
    if not somethingBuilt:
        usage()

